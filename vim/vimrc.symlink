" don't bother with vi compatibility
set nocompatible

" enable syntax highlighting
syntax enable

" configure Vundle
filetype on " without this vim emits a zero exit status, later, because of :ft off
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" install Vundle bundles
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" ensure ftdetect et al work by including this after the Vundle stuff
filetype plugin indent on
filetype plugin on

set autoindent
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
set backupcopy=yes                                           " see :help crontab
set clipboard=unnamed                                        " yank and paste with the system clipboard
set directory-=.                                             " don't store swapfiles in the current directory
set expandtab                                                " expand tabs to spaces
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set laststatus=2                                             " always show statusline
set list                                                     " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set number                                                   " show line numbers
set ruler                                                    " show where you are
set scrolloff=3                                              " show context above/below cursorline
set shiftwidth=2                                             " normal mode indentation commands use 2 spaces
set showcmd
set smartcase                                                " case-sensitive search if any caps
set softtabstop=2                                            " insert mode tab and backspace use 2 spaces
set tabstop=8                                                " actual tabs occupy 8 characters
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=longest,list,full

" Persistent undo history
set undofile " Maintain undo history between sessions
set undodir=~/.vim/undodir

" Enable basic mouse behavior such as resizing buffers.
set mouse=a

if !has('nvim')
  set clipboard+=unnamedplus
  set encoding=utf-8

  if exists('$TMUX')    " Support resizing in tmux
    set ttymouse=xterm2 " ttymouse not an option in nvim
  endif
endif

if has('nvim')
  " Temporary fix for neovim/neovim#2048
  " Shoutout to @vilhalmer for the idea for this fix
  " https://github.com/vilhalmer/System/commit/a40ff262918a83e88fb643bad31dde3c45211bba
  "nmap <bs> <C-w>h                " Fix for window movement
  "nmap <C-w><bs> :tabprevious<CR> " Fix for tab movement
  nmap <BS> <C-W>h
endif

function! TrimWhiteSpace()
  %s/\s\+$//e
endfunction

"-----------------------
" keyboard shortcuts
"-----------------------
let mapleader = ','
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <leader>l :Align
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
nnoremap <leader>a :Ag<space>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>
nnoremap <leader>t :CtrlP<CR>
nnoremap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
nnoremap <leader>] :TagbarToggle<CR>
nnoremap <leader><space> :call TrimWhiteSpace()<CR>
nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <leader>G :Gbrowse<CR>
nnoremap <leader>c <Plug>Kwbd
nnoremap <f1> :BufExplorer<cr>
nnoremap <f2> :NERDTreeToggle<cr>

" Fireplace config
autocmd FileType clojure nnoremap <buffer> <leader>re :Eval<cr>
autocmd FileType clojure nnoremap <buffer> <leader>rf :%Eval<cr>
autocmd FileType clojure nnoremap <buffer> <leader>rr :Require<cr>
autocmd FileType clojure nnoremap <buffer> <leader>rR :Require!<cr>
autocmd FileType clojure nnoremap <buffer> <leader>rt :RunTests<cr>
autocmd FileType clojure nnoremap <buffer> <leader>rl :Last<cr>
autocmd FileType clojure nnoremap <buffer> <leader>rc :FireplaceConnect<cr>
autocmd FileType clojure nnoremap <buffer> <leader>go :Eval (reset)<cr>
autocmd FileType clojure nnoremap <buffer> gd :normal [<c-d><cr>

" in case you forgot to sudo
cnoremap w!! %!sudo tee > /dev/null %

" plugin settings
let g:ctrlp_match_window = 'order:ttb,max:20'
let g:gitgutter_enabled = 0

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" Filetype Hints
" fdoc is yaml
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
" md is markdown
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile *.md set spell
" extra rails.vim help
autocmd User Rails silent! Rnavcommand decorator      app/decorators            -glob=**/* -suffix=_decorator.rb
autocmd User Rails silent! Rnavcommand observer       app/observers             -glob=**/* -suffix=_observer.rb
autocmd User Rails silent! Rnavcommand feature        features                  -glob=**/* -suffix=.feature
autocmd User Rails silent! Rnavcommand job            app/jobs                  -glob=**/* -suffix=_job.rb
autocmd User Rails silent! Rnavcommand mediator       app/mediators             -glob=**/* -suffix=_mediator.rb
autocmd User Rails silent! Rnavcommand stepdefinition features/step_definitions -glob=**/* -suffix=_steps.rb
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Fix Cursor in TMUX
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Don't copy the contents of an overwritten selection.
vnoremap p "_dP


""""""""""""""""""""""""""""""
" Customizations
"
""""""""""""""""""""""""""""""
set nocursorline " don't highlight current line
set nowrap " no wrap by default

"key mapping for window resizing
nnoremap <S-Up> <C-W>+
nnoremap <S-Down> <C-W>-
nnoremap <S-Left> <C-w><
nnoremap <S-Right> <C-w>>
inoremap jj <ESC>

" Insert literal tabs with Shift-Tab in insert mode.
inoremap <S-Tab> <C-V><Tab>

" Show gutter for max line length
let &colorcolumn=join(range(81,999),",")
highlight ColorColumn ctermbg=235 guibg=#2c2d27

" highlight search
set hlsearch
nnoremap <silent> <CR> :noh<cr>

" color with base16-shell
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" gui settings
let base16colorspace=256
let g:airline_powerline_fonts = 1
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'iTerm.app')
    set termguicolors
    colorscheme base16-eighties
    set guifont=Hasklig:h16
  else
    colorscheme base16-eighties
    set guifont=Hasklig:h16
  endif
endif

" spell check settings
hi clear SpellBad
hi SpellBad cterm=undercurl

"jump to last cursor position when opening a file
"dont do it when writing a commit log entry
autocmd BufReadPost * call SetCursorPosition()
function! SetCursorPosition()
    if &filetype !~ 'commit\c'
        if line("'\"") > 0 && line("'\"") <= line("$")
            exe "normal! g`\""
            normal! zz
        endif
    end
endfunction

"When the GUI starts, t_vb is reset to its default value.
"Reassert that no flash or beep is wanted.
set visualbell t_vb=


" NERDTree settings
let g:NERDTreeMouseMode = 2
let g:NERDTreeWinSize = 40
let NERDTreeIgnore=['\.swp$']
let NERDSpaceDelims=1
let NERDTreMinimalUI = 1
let NERDTreeDirArrows = 1

let g:python2_host_prog = '/usr/bin/python2'
let g:python3_host_prog = '/usr/local/bin/python3'

" BufExplorer settings
let g:bufExplorerDefaultHelp=0                " Do not show default help.
let g:bufExplorerDisableDefaultKeyMapping=0   " Do not disable mapping.
let g:bufExplorerFindActive=0                 " Do not go to active window.

" JavaScript settings
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 0

" Align settings
" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

" ALE for linting and fixing.
let g:ale_fix_on_save = 0
let g:ale_fixers = ['trim_whitespace']
let g:ale_fixers['bash'] = ['shellcheck']
let g:ale_fixers['clojure'] = ['clj-kondo']
let g:ale_fixers['javascript'] = ['eslint', 'prettier']
let g:ale_fixers['markdown'] = ['prettier']
let g:ale_javascript_prettier_use_local_config = 1

" Use deoplete for auto-completion.
let g:deoplete#enable_at_startup = 1

" Configure conjure - Clojure prepl integration.
let g:conjure_log_direction = "horizontal"
let g:conjure_log_blacklist = ["up", "ret", "ret-multiline", "load-file", "eval"]
"let g:conjure_nmap_eval_root_form = g:conjure_map_prefix . "EE"
